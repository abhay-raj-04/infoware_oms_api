generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums

enum UserRole {
  BUYER
  SUPPLIER
  ADMIN
}

enum OrderStatus {
  PENDING
  APPROVED
  SHIPPED
  DELIVERED
  CANCELLED
}

// Models

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  email        String   @unique
  passwordHash String
  role         UserRole
  firstName    String?
  lastName     String?
  address      String?
  phoneNumber  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  products      Product[]
  orders        Order[]
  statusChanges OrderStatusHistory[] @relation("OrderStatusChangedBy")
  auditLogs     AuditLog[]
  OrderItem     OrderItem[]
}

model UnitOfMeasure {
  id     String  @id @default(uuid())
  name   String  @unique
  symbol String  @unique
  isBase Boolean @default(false)

  products           Product[]
  uomConversionsFrom UomConversion[] @relation("FromUom")
  uomConversionsTo   UomConversion[] @relation("ToUom")
  orderItems         OrderItem[]
}

model UomConversion {
  id               String  @id @default(uuid())
  fromUomId        String
  toUomId          String
  conversionFactor Decimal @db.Decimal(10, 8)

  fromUom UnitOfMeasure @relation("FromUom", fields: [fromUomId], references: [id])
  toUom   UnitOfMeasure @relation("ToUom", fields: [toUomId], references: [id])

  @@unique([fromUomId, toUomId])
}

model Product {
  id           String   @id @default(uuid())
  supplierId   String
  name         String
  description  String?
  pricePerUnit Decimal  @db.Decimal(10, 4)
  baseUomId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  supplier   User          @relation(fields: [supplierId], references: [id])
  baseUom    UnitOfMeasure @relation(fields: [baseUomId], references: [id])
  inventory  Inventory?
  orderItems OrderItem[]
}

model Inventory {
  id                   String    @id @default(uuid())
  productId            String    @unique
  currentStockQuantity Decimal   @db.Decimal(10, 4)
  reorderLevel         Decimal?  @db.Decimal(10, 4)
  lastRestockedAt      DateTime?
  updatedAt            DateTime  @updatedAt

  product Product @relation(fields: [productId], references: [id])
}

model Order {
  id            String      @id @default(uuid())
  buyerId       String
  totalAmount   Decimal     @db.Decimal(12, 4)
  currentStatus OrderStatus
  orderDate     DateTime    @default(now())
  lastUpdatedAt DateTime    @updatedAt

  buyer         User                 @relation(fields: [buyerId], references: [id])
  items         OrderItem[]
  statusHistory OrderStatusHistory[]
}

model OrderItem {
  id            String  @id @default(uuid())
  orderId       String
  productId     String
  supplierId    String
  quantity      Decimal @db.Decimal(10, 4)
  uomId         String
  priceAtOrder  Decimal @db.Decimal(10, 4)
  lineItemTotal Decimal @db.Decimal(12, 4)

  order    Order         @relation(fields: [orderId], references: [id])
  product  Product       @relation(fields: [productId], references: [id])
  supplier User          @relation(fields: [supplierId], references: [id])
  uom      UnitOfMeasure @relation(fields: [uomId], references: [id])
}

model OrderStatusHistory {
  id              String       @id @default(uuid())
  orderId         String
  oldStatus       OrderStatus?
  newStatus       OrderStatus
  changedByUserId String
  changeTimestamp DateTime     @default(now())
  notes           String?

  order         Order @relation(fields: [orderId], references: [id])
  changedByUser User  @relation("OrderStatusChangedBy", fields: [changedByUserId], references: [id])
}

model AuditLog {
  id         String   @id @default(uuid())
  userId     String?
  action     String
  entityType String?
  entityId   String?
  oldValue   Json?
  newValue   Json?
  timestamp  DateTime @default(now())
  ipAddress  String?

  user User? @relation(fields: [userId], references: [id])
}
